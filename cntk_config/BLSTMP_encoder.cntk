Layers = 2
modelPath=$ExpDir$/$modelName$
hiddenSize=512

precision = "float"
traceLevel = 1

TrainBLSTMEncoder[
    action=train
    epochSize=0
    maxEpochs=$maxEpochs$
    Truncated=false

    BrainScriptNetworkBuilder = [
        
        BFF (x, InDim, OutDim) = [
            W = Parameter(OutDim, InDim, init='uniform', initValueScale=1)
            b = Parameter(OutDim, 1, init='fixedValue', value=0)
            o = W * x + b
        ].o

        # define network and input output       
        singleLableDim=40 
        features = Input($featDim$)
        labels = Input($labelDim$)
        weights = Input(1)
        sample_rate = 1/Mean(weights)
        weights_extend = RowRepeat(weights, singleLableDim)
        layerDims[s:0..$Layers$-1]=$hiddenSize$
        layers = BS.RNNs.RecurrentBidirectionalLSTMPStack(layerDims, cellDims=layerDims, 
                features, inputDim=$featDim$, previousHook=BS.RNNs.PreviousHC, 
                nextHook=BS.RNNs.NextHC, enableSelfStabilization=false)

        outputs = Pass(BFF(layers[Length(layerDims)-1].h, layerDims[Length(layerDims)-1] * 2, $labelDim$))

        # Define out new loss function        
        slice_outputs[i:0..$encodeNum$-1] = RowSlice(i * singleLableDim, singleLableDim, outputs)
        slice_outputs_weighted[i:0..$encodeNum$-1] =  slice_outputs[i] .* weights_extend
        slice_labels[i:0..$encodeNum$-1] = RowSlice(i * singleLableDim, singleLableDim, labels)
        slice_labels_weighted[i:0..$encodeNum$-1] = slice_labels[i] .* weights_extend
        
        ce_scale = Constant(1/$encodeNum$)
        ce_scale_weighted = ce_scale * sample_rate
        ce[i:0..$encodeNum$-1] = CrossEntropyWithSoftmax(slice_labels_weighted[i], slice_outputs_weighted[i]) 
        sum_ce[i:0..$encodeNum$-1] = if i==0 then ce[i] else sum_ce[i-1]+ce[i]
        mean_ce = sum_ce[$encodeNum$-1] * ce_scale_weighted
        errs[i:0..$encodeNum$-1] = ClassificationError(slice_labels[i], slice_outputs[i])
        splice_outputs_softmax[i:0..$encodeNum$-1]=Softmax(slice_outputs[i])
        outputs_softmax=Splice(splice_outputs_softmax)

        # special Nodes
        featureNodes = (features)
        labelNodes = (labels)
        criterionNodes = (mean_ce)
        evaluationNodes = (errs)
        outputNodes = (outputs_softmax)
        
    ]
    
    SGD=[
        epochSize=0
        learningRatesPerMB=$lratePerMB$
        momentumPerMB=$momentum$
        L2RegWeight=$l2RegWeight$
        dropoutRate=$dropoutRate$
        numMBsToShowResult=$evaluatePeriod$

        #settings for Auto Adjust Learning Rate
        AutoAdjust=[
            reduceLearnRateIfImproveLessThan=0.01
            loadBestModel=true
            increaseLearnRateIfImproveMoreThan=1000000000
            learnRateDecreaseFactor=0.5
            autoAdjustLR=AdjustAfterEpoch
            learnRateAdjustInterval=1
        ]

        #gradientClippingWithTruncation=true
        #clippingThresholdPerSample=$clippingThresholdPerSample$
    ]

    reader=[

        # reader to use
        readerType=Kaldi2Reader
        readMethod=blockRandomize
        frameMode=false
        nbruttsineachrecurrentiter=$numUttsPerMinibatch$
        miniBatchMode=Partial
        randomize=Auto
        verbosity=0
        
        features=[
            dim=$featDim$
            scpFile=$inputCounts$
            rx=$inputFeats$
            featureTransform=$featureTransform$
        ]

        labels=[
            dim=$labelDim$
            scpFile=$inputCounts$
            rx=$inputLabels$
        ]
        
        weights=[
            dim=1
            scpFile=$inputCounts$
            rx=$inputWeights$
        ]
    ]

    cvReader=[
        # reader to use
        readerType=Kaldi2Reader
        readMethod=blockRandomize
        frameMode=false
        nbruttsineachrecurrentiter=$numUttsPerMinibatch$
        miniBatchMode=Partial
        randomize=Auto
        verbosity=0

        features=[
            dim=$featDim$
            scpFile=$cvInputCounts$
            rx=$cvInputFeats$
            featureTransform=$featureTransform$
        ]
        
        labels=[
            dim=$labelDim$
            scpFile=$cvInputCounts$
            rx=$cvInputLabels$
        ]
        
        weights=[
            dim=1
            scpFile=$cvInputCounts$
            rx=$cvInputWeights$
        ]
    ]
]

